scalar Time
scalar Upload

union Media = Image | Video

type Image {
  size: Int!
}

type Video {
  duration: Int!
}

interface Book {
  title: String!
}

type Textbook implements Book {
  title: String!
  courses: [String!]!
}

type ColoringBook implements Book {
  title: String!
  colors: [String!]!
}

type Chatroom {
    name: String!
    messages: [Message!]!
}

type Message {
    id: ID!
    text: String!
    createdBy: String!
    createdAt: Time!
}

type Query {
    room(name:String!): Chatroom
    roomNonNull(name:String!): Chatroom!
    medias: [Media!]!
    books: [Book!]!
    issue8: Issue8Payload
}

type Issue8Payload {
    foo1: Issue8PayloadFoo!
    foo2: Issue8PayloadFoo!
}

type Issue8PayloadFoo {
    a: Issue8PayloadFooA!
}

type Issue8PayloadFooA {
    Aa: String!
}

input PostCreateInput {
    text: String!
}

type UploadData {
    size: Int!
}


input UploadFilesMapInput {
    somefile: Upload!
}

type UploadFilesMap {
    somefile: UploadData!
}

type Mutation {
    post(input: PostCreateInput!): Message!
    uploadFile(file: Upload!): UploadData!
    uploadFiles(files: [Upload!]!): [UploadData!]
    uploadFilesMap(files: UploadFilesMapInput!): UploadFilesMap!
}

type Subscription {
    messageAdded(roomName: String!): Message!
}

type SomeExtraType {
    child: SomeExtraTypeChild!
}

type SomeExtraTypeChild {
    child: SomeExtraTypeChildChild!
}
type SomeExtraTypeChildChild {
    id: String!
}
